// Code generated by mockery v1.1.2. DO NOT EDIT.

package main

import (
	time "time"

	dns "github.com/miekg/dns"
	mock "github.com/stretchr/testify/mock"
)

// MockConnEntry is an autogenerated mock type for the ConnEntry type
type MockConnEntry struct {
	mock.Mock
}

// AddExchange provides a mock function with given fields: rtt
func (_m *MockConnEntry) AddExchange(rtt time.Duration) {
	_m.Called(rtt)
}

// Close provides a mock function with given fields:
func (_m *MockConnEntry) Close() {
	_m.Called()
}

// CoolUpstream provides a mock function with given fields:
func (_m *MockConnEntry) CoolUpstream() {
	_m.Called()
}

// GetAddress provides a mock function with given fields:
func (_m *MockConnEntry) GetAddress() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAverageLatency provides a mock function with given fields:
func (_m *MockConnEntry) GetAverageLatency() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetConn provides a mock function with given fields:
func (_m *MockConnEntry) GetConn() *dns.Conn {
	ret := _m.Called()

	var r0 *dns.Conn
	if rf, ok := ret.Get(0).(func() *dns.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Conn)
		}
	}

	return r0
}

// GetUpstream provides a mock function with given fields:
func (_m *MockConnEntry) GetUpstream() *Upstream {
	ret := _m.Called()

	var r0 *Upstream
	if rf, ok := ret.Get(0).(func() *Upstream); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Upstream)
		}
	}

	return r0
}

// GetWeight provides a mock function with given fields:
func (_m *MockConnEntry) GetWeight() UpstreamWeight {
	ret := _m.Called()

	var r0 UpstreamWeight
	if rf, ok := ret.Get(0).(func() UpstreamWeight); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(UpstreamWeight)
	}

	return r0
}
