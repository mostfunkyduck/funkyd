// Code generated by mockery v1.1.2. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

// Add provides a mock function with given fields: response
func (_m *MockCache) Add(response Response) {
	_m.Called(response)
}

// Clean provides a mock function with given fields:
func (_m *MockCache) Clean() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Get provides a mock function with given fields: name, qtype
func (_m *MockCache) Get(name string, qtype uint16) (Response, bool) {
	ret := _m.Called(name, qtype)

	var r0 Response
	if rf, ok := ret.Get(0).(func(string, uint16) Response); ok {
		r0 = rf(name, qtype)
	} else {
		r0 = ret.Get(0).(Response)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, uint16) bool); ok {
		r1 = rf(name, qtype)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Lock provides a mock function with given fields:
func (_m *MockCache) Lock() {
	_m.Called()
}

// RLock provides a mock function with given fields:
func (_m *MockCache) RLock() {
	_m.Called()
}

// RUnlock provides a mock function with given fields:
func (_m *MockCache) RUnlock() {
	_m.Called()
}

// RemoveSlice provides a mock function with given fields: responses
func (_m *MockCache) RemoveSlice(responses []Response) {
	_m.Called(responses)
}

// Size provides a mock function with given fields:
func (_m *MockCache) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// StartCleaningCrew provides a mock function with given fields:
func (_m *MockCache) StartCleaningCrew() {
	_m.Called()
}

// StopCleaningCrew provides a mock function with given fields:
func (_m *MockCache) StopCleaningCrew() {
	_m.Called()
}

// Unlock provides a mock function with given fields:
func (_m *MockCache) Unlock() {
	_m.Called()
}
