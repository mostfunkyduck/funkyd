// Code generated by mockery v1.1.2. DO NOT EDIT.

package main

import (
	dns "github.com/miekg/dns"
	mock "github.com/stretchr/testify/mock"
)

// MockServer is an autogenerated mock type for the Server type
type MockServer struct {
	mock.Mock
}

// AddUpstream provides a mock function with given fields: u
func (_m *MockServer) AddUpstream(u *Upstream) {
	_m.Called(u)
}

// GetConnection provides a mock function with given fields:
func (_m *MockServer) GetConnection() (ConnEntry, error) {
	ret := _m.Called()

	var r0 ConnEntry
	if rf, ok := ret.Get(0).(func() ConnEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ConnEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionPool provides a mock function with given fields:
func (_m *MockServer) GetConnectionPool() ConnPool {
	ret := _m.Called()

	var r0 ConnPool
	if rf, ok := ret.Get(0).(func() ConnPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ConnPool)
		}
	}

	return r0
}

// GetHostedCache provides a mock function with given fields:
func (_m *MockServer) GetHostedCache() Cache {
	ret := _m.Called()

	var r0 Cache
	if rf, ok := ret.Get(0).(func() Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Cache)
		}
	}

	return r0
}

// HandleDNS provides a mock function with given fields: w, m
func (_m *MockServer) HandleDNS(w ResponseWriter, m *dns.Msg) {
	_m.Called(w, m)
}

// RecursiveQuery provides a mock function with given fields: domain, rrtype
func (_m *MockServer) RecursiveQuery(domain string, rrtype uint16) (Response, string, error) {
	ret := _m.Called(domain, rrtype)

	var r0 Response
	if rf, ok := ret.Get(0).(func(string, uint16) Response); ok {
		r0 = rf(domain, rrtype)
	} else {
		r0 = ret.Get(0).(Response)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, uint16) string); ok {
		r1 = rf(domain, rrtype)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, uint16) error); ok {
		r2 = rf(domain, rrtype)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RetrieveRecords provides a mock function with given fields: domain, rrtype
func (_m *MockServer) RetrieveRecords(domain string, rrtype uint16) (Response, string, error) {
	ret := _m.Called(domain, rrtype)

	var r0 Response
	if rf, ok := ret.Get(0).(func(string, uint16) Response); ok {
		r0 = rf(domain, rrtype)
	} else {
		r0 = ret.Get(0).(Response)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, uint16) string); ok {
		r1 = rf(domain, rrtype)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, uint16) error); ok {
		r2 = rf(domain, rrtype)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServeDNS provides a mock function with given fields: w, r
func (_m *MockServer) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {
	_m.Called(w, r)
}
